import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import numpy as np
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# load data
dataset = pd.read_csv('maldata2.csv')
dataset = dataset.dropna()
print('nilai duplikat', dataset.duplicated().value_counts())
maldata = dataset.drop(['Name', 'Md5'], axis=1)
print(maldata.shape)

# menggunakan dataset label sebanding
df = maldata[:2307]
X = df.iloc[:, 0:88].values
y = df.iloc[:, 88].values
print(y)
# Random Forest importance
clf = RandomForestClassifier(random_state=0, n_jobs=-1)
model = clf.fit(X, y)
select = SelectFromModel(model,prefit=True)
X_new = select.transform(X)
print(X.shape,X_new.shape)
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

# List of Feature
print("Feature ranking:")
for f in range(X_new.shape[1]):
    print("%d. %s (%f)" % (f + 1, df.columns[indices[f]], importances[indices[f]]))

for i in range(X_new.shape[1]):
    X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size = 0.2, random_state = 0)
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)

    pca = PCA(n_components = i+1)
    X_train = pca.fit_transform(X_train)
    X_test = pca.transform(X_test)
    print('Variance sum ke ', i+1, ' :', pca.explained_variance_ratio_.cumsum()[-1])

    # Mengaktifkan/memanggil/membuat fungsi klasifikasi Naive bayes
    modelnb = GaussianNB()
    # Memasukkan data training pada fungsi klasifikasi naive bayes
    nbtrain = modelnb.fit(X_train, y_train)
    nbtrain.class_count_

    # Menentukan hasil prediksi dari x_test
    y_pred = nbtrain.predict(X_test)
    # print(y_pred)

    # Menentukan probabilitas hasil prediksi
    nbtrain.predict_proba(X_test)

    # import confusion_matrix model
    print(confusion_matrix(y_test, y_pred))

    # Menghitung nilai akurasi dari klasifikasi naive bayes
    print(classification_report(y_test, y_pred))
    print(accuracy_score(y_test, y_pred))

